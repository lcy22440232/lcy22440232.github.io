---
layout: post
title:  "16. while循环"
date:   2022-09-20 21:16:32 +0800
categories: R语言
---

# Part1**while循环：**

- 只要给定的条件为 true，R 语言中的 while 循环语句会重复执行一个目标语句。

```r
# 语法格式如下：
while(condition)
{
   statement(s);
}
```

- 在这里，statement(s) 可以是一个单独的语句，也可以是几个语句组成的代码块。

- condition 可以是任意的表达式，当为任意非零值时都为 true。当条件为 true 时执行循环。当条件为 false 时，退出循环，程序流将继续执行紧接着循环的下一条语句。

```r
######################################################
# while循环：
i = 1
while (i<10) {
  print(paste("第",i,"次打印:生信师兄！",sep = ""))
  i = i+1
}

# 在for循环中，循环控制变量的初始化和修改都放在语句头部分，
# 形式较简洁，且特别适用于循环次数已知的情况。
for (i in 1:10) {
  print(paste("第",i,"次打印:生信师兄！",sep = ""))
}


######################################################
# 在while循环中，循环控制变量的初始化一般放在while语句之前，
# 循环控制变量的修改一般放在循环体中，形式上不如for语句简洁，
# 但它比较适用于循环次数不易预知的情况（用某一条件控制循环）。
a <- seq(2,100,2)
i <- 1
while (a[i]<50) {
  print(paste("a的第",i,"个元素为：", a[i],"; 它小于50",sep = ""))
  i = i+1
}


#######################################################
# 多个判断条件：
a <- seq(2,100,2)
b <- seq(3,99,3)
i <- 1
while (a[i]<50 & b[i]<60) {
  print(paste("a的第",i,"个元素为：", a[i],"; 它小于50",sep = ""))
  print(paste("b的第",i,"个元素为：", b[i],"; 它小于60",sep = ""))
  i = i+1
}

# 使用cat输出：
a <- seq(2,100,2)
b <- seq(3,99,3)
i <- 1
while (a[i]<50 & b[i]<60) {
  cat("a的第",i,"个元素为:", a[i],"; 它小于50","\t",
      "b的第",i,"个元素为:", b[i],"; 它小于60","\n")
  i = i+1
}
```

> 在**for循环**中，循环控制变量的初始化和修改都放在语句头部分，形式较简洁，且特别**适用于循环次数已知的情况。**
> 
> 在**while循环**中，循环控制变量的初始化一般放在while语句之前，循环控制变量的修改一般放在循环体中，形式上不如for语句简洁，但它比较**适用于循环次数不易预知的情况（用某一条件控制循环）。**
> 
> 两种形式各有优点，但它们在功能上是等价的，可以**相互转换。**

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
